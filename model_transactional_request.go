/*
Loops OpenAPI Spec

This is the OpenAPI Spec for the [Loops API](https://loops.so/docs/api).

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loops

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionalRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionalRequest{}

// TransactionalRequest struct for TransactionalRequest
type TransactionalRequest struct {
	Email string `json:"email"`
	// The ID of the transactional email to send.
	TransactionalId string `json:"transactionalId"`
	// An object containing contact data as defined by the data variables added to the transactional email template.
	DataVariables map[string]interface{} `json:"dataVariables,omitempty"`
}

type _TransactionalRequest TransactionalRequest

// NewTransactionalRequest instantiates a new TransactionalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionalRequest(email string, transactionalId string) *TransactionalRequest {
	this := TransactionalRequest{}
	this.Email = email
	this.TransactionalId = transactionalId
	return &this
}

// NewTransactionalRequestWithDefaults instantiates a new TransactionalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionalRequestWithDefaults() *TransactionalRequest {
	this := TransactionalRequest{}
	return &this
}

// GetEmail returns the Email field value
func (o *TransactionalRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *TransactionalRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *TransactionalRequest) SetEmail(v string) {
	o.Email = v
}

// GetTransactionalId returns the TransactionalId field value
func (o *TransactionalRequest) GetTransactionalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionalId
}

// GetTransactionalIdOk returns a tuple with the TransactionalId field value
// and a boolean to check if the value has been set.
func (o *TransactionalRequest) GetTransactionalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionalId, true
}

// SetTransactionalId sets field value
func (o *TransactionalRequest) SetTransactionalId(v string) {
	o.TransactionalId = v
}

// GetDataVariables returns the DataVariables field value if set, zero value otherwise.
func (o *TransactionalRequest) GetDataVariables() map[string]interface{} {
	if o == nil || IsNil(o.DataVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.DataVariables
}

// GetDataVariablesOk returns a tuple with the DataVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionalRequest) GetDataVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DataVariables) {
		return map[string]interface{}{}, false
	}
	return o.DataVariables, true
}

// HasDataVariables returns a boolean if a field has been set.
func (o *TransactionalRequest) HasDataVariables() bool {
	if o != nil && !IsNil(o.DataVariables) {
		return true
	}

	return false
}

// SetDataVariables gets a reference to the given map[string]interface{} and assigns it to the DataVariables field.
func (o *TransactionalRequest) SetDataVariables(v map[string]interface{}) {
	o.DataVariables = v
}

func (o TransactionalRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionalRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["transactionalId"] = o.TransactionalId
	if !IsNil(o.DataVariables) {
		toSerialize["dataVariables"] = o.DataVariables
	}
	return toSerialize, nil
}

func (o *TransactionalRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"transactionalId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionalRequest := _TransactionalRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionalRequest)

	if err != nil {
		return err
	}

	*o = TransactionalRequest(varTransactionalRequest)

	return err
}

type NullableTransactionalRequest struct {
	value *TransactionalRequest
	isSet bool
}

func (v NullableTransactionalRequest) Get() *TransactionalRequest {
	return v.value
}

func (v *NullableTransactionalRequest) Set(val *TransactionalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionalRequest(val *TransactionalRequest) *NullableTransactionalRequest {
	return &NullableTransactionalRequest{value: val, isSet: true}
}

func (v NullableTransactionalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


